stages:
  - build
  - push
  - deploy

variables:
  # Variables para Docker
  DOCKER_REGISTRY: $CI_REGISTRY # Esta variable está predefinida por GitLab
  REGISTRY_USER: $CI_REGISTRY_USER # Esta variable está predefinida por GitLab
  REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD # Esta variable está predefinida por GitLab

  # Nombres de las imágenes
  FRONTEND_IMAGE_NAME: ${DOCKER_REGISTRY}/kinborg/front
  BACKEND_IMAGE_NAME: ${DOCKER_REGISTRY}/kinborg/back

  # Tags de las imágenes (usando el hash corto del commit)
  FRONTEND_IMAGE_TAG: ${CI_COMMIT_SHORT_SHA}
  BACKEND_IMAGE_TAG: ${CI_COMMIT_SHORT_SHA}

# Template para construcción de imágenes Docker
.build_template: &build_definition
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD $DOCKER_REGISTRY

# Construcción de la imagen del frontend
build:frontend:
  <<: *build_definition
  stage: build
  script:
    - cd frontend # Ajusta esta ruta a donde esté tu código de frontend
    - echo "Construyendo imagen de frontend..."
    - docker build -t ${FRONTEND_IMAGE_NAME}:${FRONTEND_IMAGE_TAG} .
    - docker tag ${FRONTEND_IMAGE_NAME}:${FRONTEND_IMAGE_TAG} ${FRONTEND_IMAGE_NAME}:latest
    - 'echo "Imagen frontend construida: ${FRONTEND_IMAGE_NAME}:${FRONTEND_IMAGE_TAG}"'

# Construcción de la imagen del backend
build:backend:
  <<: *build_definition
  stage: build
  script:
    - cd backend # Ajusta esta ruta a donde esté tu código de backend
    - echo "Construyendo imagen de backend..."
    - docker build -t ${BACKEND_IMAGE_NAME}:${BACKEND_IMAGE_TAG} .
    - docker tag ${BACKEND_IMAGE_NAME}:${BACKEND_IMAGE_TAG} ${BACKEND_IMAGE_NAME}:latest
    - 'echo "Imagen backend construida: ${BACKEND_IMAGE_NAME}:${BACKEND_IMAGE_TAG}"'

# Enviar las imágenes al registro de GitLab
push:images:
  <<: *build_definition
  stage: push
  script:
    - echo "Enviando imágenes al registro..."
    - docker push ${FRONTEND_IMAGE_NAME}:${FRONTEND_IMAGE_TAG}
    - docker push ${FRONTEND_IMAGE_NAME}:latest
    - docker push ${BACKEND_IMAGE_NAME}:${BACKEND_IMAGE_TAG}
    - docker push ${BACKEND_IMAGE_NAME}:latest
    - echo "Imágenes enviadas exitosamente"
  needs:
    - build:frontend
    - build:backend

# Desplegar la aplicación localmente con docker-compose
deploy:local:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - apk add --no-cache docker-compose
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD $DOCKER_REGISTRY
  script:
    - echo "Actualizando docker-compose.yml con las nuevas imágenes..."
    # Actualizar las líneas de imagen en el docker-compose.yml con las nuevas tags
    - sed -i "s|registry.kinborg.dev/kinborg/front:latest|${FRONTEND_IMAGE_NAME}:${FRONTEND_IMAGE_TAG}|g" docker-compose.yml
    - sed -i "s|registry.kinborg.dev/kinborg/back:latest|${BACKEND_IMAGE_NAME}:${BACKEND_IMAGE_TAG}|g" docker-compose.yml

    # Crear archivo .env desde variables de GitLab
    - |
      cat > .env << EOF
      # MySQL Configuration
      MYSQLDB_USER=$MYSQLDB_USER
      MYSQLDB_PASSWORD=$MYSQLDB_PASSWORD
      MYSQLDB_ROOT_PASSWORD=$MYSQLDB_ROOT_PASSWORD
      MYSQLDB_DATABASE=$MYSQLDB_DATABASE
      MYSQLDB_LOCAL_PORT=$MYSQLDB_LOCAL_PORT
      MYSQLDB_DOCKER_PORT=$MYSQLDB_DOCKER_PORT
      MYSQLDB_HOST=$MYSQLDB_HOST

      # Node Configuration
      NODE_LOCAL_PORT=$NODE_LOCAL_PORT
      NODE_DOCKER_PORT=$NODE_DOCKER_PORT

      # Server URLs
      SERVER_URL=$SERVER_URL
      PUBLIC_HOST=$PUBLIC_HOST
      EOF

    # Detener los contenedores existentes (si los hay) y levantar los nuevos
    - docker-compose down
    - docker-compose up -d

    # Verificar que los contenedores estén funcionando
    - docker-compose ps
    - echo "Aplicación desplegada exitosamente en el entorno local"
  needs:
    - push:images
  # Este job está configurado para ejecutarse solo en la rama principal
  only:
    - master # Para incluir ambos nombres comunes de la rama principal
