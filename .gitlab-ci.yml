stages:
  - build
  - push
  - deploy

variables:
  # Variables para Docker
  DOCKER_REGISTRY: registry.kinborg.dev
  REGISTRY_USER: $CI_REGISTRY_USER
  REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD

  # Nombres de las imágenes
  FRONTEND_IMAGE_NAME: ${DOCKER_REGISTRY}/kinborg/blue-bookery/front
  BACKEND_IMAGE_NAME: ${DOCKER_REGISTRY}/kinborg/blue-bookery/back

  # Tags de las imágenes
  FRONTEND_IMAGE_TAG: ${CI_COMMIT_SHORT_SHA}
  BACKEND_IMAGE_TAG: ${CI_COMMIT_SHORT_SHA}

# Construcción de la imagen del frontend
build:frontend:
  stage: build
  image: docker:20.10.16
  script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD $DOCKER_REGISTRY
    - cd frontend # Ajusta esta ruta a donde esté tu código de frontend
    - echo "Construyendo imagen de frontend..."
    - docker build -t ${FRONTEND_IMAGE_NAME}:${FRONTEND_IMAGE_TAG} .
    - docker tag ${FRONTEND_IMAGE_NAME}:${FRONTEND_IMAGE_TAG} ${FRONTEND_IMAGE_NAME}:latest
    - 'echo "Imagen frontend construida: ${FRONTEND_IMAGE_NAME}:${FRONTEND_IMAGE_TAG}"'

# Construcción de la imagen del backend
build:backend:
  stage: build
  image: docker:20.10.16
  script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD $DOCKER_REGISTRY
    - cd backend # Ajusta esta ruta a donde esté tu código de backend
    - echo "Construyendo imagen de backend..."
    - docker build -t ${BACKEND_IMAGE_NAME}:${BACKEND_IMAGE_TAG} .
    - docker tag ${BACKEND_IMAGE_NAME}:${BACKEND_IMAGE_TAG} ${BACKEND_IMAGE_NAME}:latest
    - 'echo "Imagen backend construida: ${BACKEND_IMAGE_NAME}:${BACKEND_IMAGE_TAG}"'

# Enviar las imágenes al registro
push:images:
  stage: push
  image: docker:20.10.16
  script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD $DOCKER_REGISTRY
    - echo "Enviando imágenes al registro..."
    - docker push ${FRONTEND_IMAGE_NAME}:${FRONTEND_IMAGE_TAG}
    - docker push ${FRONTEND_IMAGE_NAME}:latest
    - docker push ${BACKEND_IMAGE_NAME}:${BACKEND_IMAGE_TAG}
    - docker push ${BACKEND_IMAGE_NAME}:latest
    - echo "Imágenes enviadas exitosamente"
  needs:
    - build:frontend
    - build:backend

# Desplegar la aplicación localmente con docker-compose
deploy:local:
  stage: deploy
  image: docker:20.10.16
  script:
    # Instalar herramientas necesarias
    - apk add --no-cache docker-compose

    # Login al registro de Docker
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD $DOCKER_REGISTRY

    # Definir la ubicación donde desplegar la aplicación
    - export DEPLOY_PATH="/home/kinborg/BlueBookery"

    # Crear la ruta si no existe
    - mkdir -p $DEPLOY_PATH

    # Copiar los archivos necesarios a la ubicación de despliegue
    - cp docker-compose.yml $DEPLOY_PATH/
    - cp nginx/nginx.conf $DEPLOY_PATH/nginx.conf

    # Crear directorios necesarios en la ubicación de despliegue
    - mkdir -p $DEPLOY_PATH/mysql-data
    - touch $DEPLOY_PATH/init.sql

    # Cambiar al directorio de despliegue
    - cd $DEPLOY_PATH

    # Actualizar las imágenes en el docker-compose.yml
    - sed -i "s|registry.kinborg.dev/kinborg/front:latest|${FRONTEND_IMAGE_NAME}:${FRONTEND_IMAGE_TAG}|g" docker-compose.yml
    - sed -i "s|registry.kinborg.dev/kinborg/back:latest|${BACKEND_IMAGE_NAME}:${BACKEND_IMAGE_TAG}|g" docker-compose.yml

    # Crear archivo .env con las variables necesarias
    - |
      cat > .env << EOF
      # MySQL Configuration
      MYSQLDB_USER=$MYSQLDB_USER
      MYSQLDB_PASSWORD=$MYSQLDB_PASSWORD
      MYSQLDB_ROOT_PASSWORD=$MYSQLDB_ROOT_PASSWORD
      MYSQLDB_DATABASE=$MYSQLDB_DATABASE
      MYSQLDB_LOCAL_PORT=$MYSQLDB_LOCAL_PORT
      MYSQLDB_DOCKER_PORT=$MYSQLDB_DOCKER_PORT
      MYSQLDB_HOST=$MYSQLDB_HOST

      # Node Configuration
      NODE_LOCAL_PORT=$NODE_LOCAL_PORT
      NODE_DOCKER_PORT=$NODE_DOCKER_PORT

      # Server URLs
      SERVER_URL=$SERVER_URL
      PUBLIC_HOST=$PUBLIC_HOST
      EOF

    # Reiniciar los contenedores
    - docker-compose down
    - docker-compose up -d

    # Verificar estado
    - echo "Verificando que todos los servicios estén en funcionamiento..."
    - docker-compose ps
    - |
      if docker-compose ps | grep -q "mysql.*Up" && \
        docker-compose ps | grep -q "nginx.*Up" && \
        docker-compose ps | grep -q "backend.*Up" && \
        docker-compose ps | grep -q "frontend.*Up"; then
        echo "✅ Todos los servicios están funcionando correctamente"
        echo "🚀 Aplicación desplegada exitosamente en $DEPLOY_PATH"
      else
        echo "❌ ERROR: No todos los servicios están en funcionamiento"
        echo "⚠️ Verificar los logs para más detalles:"
        docker-compose logs
        exit 1
      fi
  only:
    - main
    - master
